"""
[vmdoc:description]
The init file with instructions for how to use the library
[vmdoc:enddescription]
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parents[0])) 

from include.mkdocs_build import *
from include.vmdoc import vmdoc_generate_markdown_files
import shutil



"""
[vmdoc:start]
## vicmil_generate_project_documentation

Specify directory to look for source files, and where you want docs directory
Then it automatically generates the documentation for you

```
def vicmil_generate_project_documentation(docs_dir: str, src_dir: str) -> None
```

Example
```
from vicmil_pip.packages.pyMkDocs import *

# The path where the documentation will be stored
docs_dir = get_directory_path(__file__) + "/docs"

# The path where to look for files with documentation
src_dir = get_directory_path(__file__, 2)

vicmil_generate_project_documentation(docs_dir, src_dir)
```

[OPTIONAL]: You can also specify what files you want to include/exclude using syntax like .gitignore

```
from vicmil_pip.packages.pyMkDocs import *

# The path where the documentation will be stored
docs_dir = get_directory_path(__file__) + "/docs"

# The path where to look for files with documentation
src_dir = get_directory_path(__file__, 2)

# The files to include
gitignore_content = \"""
        # Exclude everything by default
        *

        # Include code files
        !*.py
        !*.cpp
        !*.h
        !*.hpp
        !*.java
        !*.js

        # Exclude directories
        venv/*
        node_modules/*
        build/*
        dist/*

        # Exclude specific log files
        *.log
        *.tmp
        \"""

vicmil_generate_project_documentation(docs_dir, src_dir, gitignore_content)
```
[vmdoc:end]
"""
def vicmil_generate_project_documentation(docs_dir: str, src_dir: str) -> None:
    # Ensure the mkdocs project is setup in the docs folder
    ensure_mkdocs_project_setup(docs_dir)

    # Build mkdocs files based on vmdoc documentation
    output_dir = docs_dir + "/docs/vmdoc"
    os.makedirs(output_dir, exist_ok=True)
    vmdoc_generate_markdown_files(src_dir, output_dir)

    # Compile project and show the result in the browser
    compile_mkdocs(docs_dir)


def update_packageDocs_readme():
    # Get a list of all directories inside package path
    # Then add a path to each one in the readme, i.e. [dir_name](<dir_name>/site/)

    # Get a list of all directories inside packageDocs
    docs_dir = get_directory_path(__file__, 1) + "/packageDocs"
    readme_path = os.path.join(docs_dir, "README.md")

    # Collect directory names (excluding files and hidden folders)
    dir_names = [
        name for name in os.listdir(docs_dir)
        if os.path.isdir(os.path.join(docs_dir, name)) and not name.startswith(".")
    ]

    # Create markdown-style links for each directory
    lines = [f"- [{name}]({name}/site/)" for name in sorted(dir_names)]

    # Write the list to README.md
    with open(readme_path, "w", encoding="utf-8") as f:
        f.write("# Package Documentation Index\n\n")
        f.write("\n".join(lines))
        f.write("\n")


def copy_directory(src_dir, dest_dir):
    """
    Copies the contents of src_dir to dest_dir.
    If dest_dir exists, it will raise an error unless dirs_exist_ok=True (Python 3.8+).
    """
    if not os.path.exists(src_dir):
        raise FileNotFoundError(f"Source directory '{src_dir}' does not exist.")
    
    # Optionally: remove dest_dir if you want to overwrite
    if os.path.exists(dest_dir):
        shutil.rmtree(dest_dir)
    
    shutil.copytree(src_dir, dest_dir)


def generate_package_documentation(package_name: str):
    # The path where the documentation will be stored
    package_dir = get_directory_path(__file__, 1) + "/" + package_name

    if os.path.exists(package_dir):
        # The path where to look for files with documentation
        docs_dir = package_dir + "/docs"
        src_dir = package_dir

        # Ensure the mkdocs project is setup in the docs folder
        ensure_mkdocs_project_setup(docs_dir)

        # Copy the documentation to packageDocs
        package_docs_dir = get_directory_path(__file__, 1) + "/packageDocs"
        if os.path.exists(package_docs_dir):
            copy_directory(docs_dir, package_docs_dir + "/" + package_name)

            update_packageDocs_readme()

        vicmil_generate_project_documentation(docs_dir, src_dir)

    else:
        print(f"path {docs_dir} does not exist!")